
services:
  eyra-proxy:
    image: nginx:1.25-alpine
    container_name: eyra-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./eyra-frontend/dist:/usr/share/nginx/html
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./certbot-webroot:/usr/share/nginx/html

    depends_on:
      - eyra-api
      - eyra-web
    networks:
      - eyra-network

  eyra-web:
    build:
      context: ./eyra-frontend
      dockerfile: Dockerfile
      target: builder
      args:
        - VITE_API_URL=${VITE_API_URL}
    container_name: eyra-web
    command: ["sh", "-c", "npm run build"]
    volumes:
      - frontend_build:/app/dist
    networks:
      - eyra-network


  eyra-api:
    build:
      context: ./eyra-backend
      dockerfile: Dockerfile
      args:
        - APP_ENV=${APP_ENV}
    container_name: eyra-api
    expose:
      - "9000"
    volumes:
      - ./eyra-backend:/var/www/html
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - APP_ENV=${APP_ENV}
      - APP_SECRET=${APP_SECRET}
      - JWT_PASSPHRASE=${JWT_PASSPHRASE}
    networks:
      - eyra-network




  eyra-db:
    image: postgres:16-alpine
    container_name: eyra-db
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - eyra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  eyra-network:
    driver: bridge

volumes:
  postgres_data:
  frontend_build:
