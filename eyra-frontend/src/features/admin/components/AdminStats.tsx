// ! 31/05/2025 - Componente de estad√≠sticas para panel de administraci√≥n

import React, { useState, useEffect } from 'react';
import { Card } from '../../../components/ui/Card';
import { adminService } from '../../../services/adminService';

interface AdminStatsProps {\n  refreshTrigger?: number;\n}\n\ninterface StatsData {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  adminUsers: number;\n  recentRegistrations: number;\n  completedOnboarding: number;\n}\n\nconst AdminStats: React.FC<AdminStatsProps> = ({ refreshTrigger }) => {\n  const [stats, setStats] = useState<StatsData>({\n    totalUsers: 0,\n    activeUsers: 0,\n    inactiveUsers: 0,\n    adminUsers: 0,\n    recentRegistrations: 0,\n    completedOnboarding: 0,\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const loadStats = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Cargar todos los usuarios para generar estad√≠sticas\n      const response = await adminService.listUsers({ limit: 1000 });\n      const users = response.users;\n      \n      // Calcular estad√≠sticas\n      const totalUsers = users.length;\n      const activeUsers = users.filter(user => user.state).length;\n      const inactiveUsers = users.filter(user => !user.state).length;\n      const adminUsers = users.filter(user => user.roles.includes('ROLE_ADMIN')).length;\n      const completedOnboarding = users.filter(user => user.onboardingCompleted).length;\n      \n      // Usuarios registrados en los √∫ltimos 7 d√≠as\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      const recentRegistrations = users.filter(user => \n        new Date(user.createdAt) >= weekAgo\n      ).length;\n      \n      setStats({\n        totalUsers,\n        activeUsers,\n        inactiveUsers,\n        adminUsers,\n        recentRegistrations,\n        completedOnboarding,\n      });\n    } catch (err: any) {\n      setError(err.message || 'Error al cargar estad√≠sticas');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadStats();\n  }, [refreshTrigger]);\n\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n        {[...Array(6)].map((_, i) => (\n          <div key={i} className=\"neo-card animate-pulse\">\n            <div className=\"h-20 bg-gray-200 rounded\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"neo-card mb-8\">\n        <div className=\"text-center py-8\">\n          <div className=\"text-red-600 mb-4\">{error}</div>\n          <button\n            onClick={loadStats}\n            className=\"neo-button neo-button-primary\"\n          >\n            Reintentar\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const statCards = [\n    {\n      title: 'Total de Usuarios',\n      value: stats.totalUsers,\n      icon: 'üë•',\n      color: 'bg-blue-500',\n      textColor: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n    },\n    {\n      title: 'Usuarios Activos',\n      value: stats.activeUsers,\n      icon: '‚úÖ',\n      color: 'bg-green-500',\n      textColor: 'text-green-600',\n      bgColor: 'bg-green-50',\n      percentage: stats.totalUsers > 0 ? Math.round((stats.activeUsers / stats.totalUsers) * 100) : 0,\n    },\n    {\n      title: 'Usuarios Inactivos',\n      value: stats.inactiveUsers,\n      icon: '‚ùå',\n      color: 'bg-red-500',\n      textColor: 'text-red-600',\n      bgColor: 'bg-red-50',\n      percentage: stats.totalUsers > 0 ? Math.round((stats.inactiveUsers / stats.totalUsers) * 100) : 0,\n    },\n    {\n      title: 'Administradores',\n      value: stats.adminUsers,\n      icon: 'üëë',\n      color: 'bg-purple-500',\n      textColor: 'text-purple-600',\n      bgColor: 'bg-purple-50',\n    },\n    {\n      title: 'Registros Recientes',\n      value: stats.recentRegistrations,\n      icon: 'üìà',\n      color: 'bg-indigo-500',\n      textColor: 'text-indigo-600',\n      bgColor: 'bg-indigo-50',\n      subtitle: '√öltimos 7 d√≠as',\n    },\n    {\n      title: 'Onboarding Completado',\n      value: stats.completedOnboarding,\n      icon: 'üéØ',\n      color: 'bg-teal-500',\n      textColor: 'text-teal-600',\n      bgColor: 'bg-teal-50',\n      percentage: stats.totalUsers > 0 ? Math.round((stats.completedOnboarding / stats.totalUsers) * 100) : 0,\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n      {statCards.map((card, index) => (\n        <div key={index} className=\"neo-card transition-shadow\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <span className=\"text-2xl\">{card.icon}</span>\n                <h3 className=\"text-sm font-medium text-gray-600\">\n                  {card.title}\n                </h3>\n              </div>\n              <div className=\"space-y-1\">\n                <div className={`text-3xl font-bold ${card.textColor}`}>\n                  {card.value.toLocaleString()}\n                </div>\n                {card.percentage !== undefined && (\n                  <div className=\"text-sm text-gray-500\">\n                    {card.percentage}% del total\n                  </div>\n                )}\n                {card.subtitle && (\n                  <div className=\"text-sm text-gray-500\">\n                    {card.subtitle}\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            {/* Gr√°fico circular simple para porcentajes */}\n            {card.percentage !== undefined && (\n              <div className=\"relative\">\n                <svg className=\"w-16 h-16 transform -rotate-90\">\n                  <circle\n                    cx=\"32\"\n                    cy=\"32\"\n                    r=\"28\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"4\"\n                    fill=\"transparent\"\n                    className=\"text-gray-200\"\n                  />\n                  <circle\n                    cx=\"32\"\n                    cy=\"32\"\n                    r=\"28\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"4\"\n                    fill=\"transparent\"\n                    strokeDasharray={`${2 * Math.PI * 28}`}\n                    strokeDashoffset={`${2 * Math.PI * 28 * (1 - card.percentage / 100)}`}\n                    className={card.textColor}\n                    style={{\n                      transition: 'stroke-dashoffset 0.5s ease-in-out'\n                    }}\n                  />\n                </svg>\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <span className={`text-xs font-bold ${card.textColor}`}>\n                    {card.percentage}%\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default AdminStats;"
