FROM php:8.2-cli

# ! 31/05/2025 - Dockerfile PRINCIPAL para Railway deployment

# Instalar extensiones PHP necesarias
RUN apt-get update && apt-get install -y \
    git unzip zip libpq-dev libicu-dev libzip-dev \
    && docker-php-ext-install pdo pdo_pgsql intl zip \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Instalar Composer
COPY --from=composer:2.6 /usr/bin/composer /usr/bin/composer

# Establecer directorio de trabajo
WORKDIR /var/www/html

# Copiar archivos de dependencias primero (para cache de Docker)
COPY composer.json composer.lock ./

# Instalar dependencias PHP
RUN composer install --no-dev --optimize-autoloader --no-scripts

# Copiar el resto del proyecto
COPY . .

# Ejecutar scripts post-install de Composer
RUN composer run-script post-install-cmd --no-interaction || echo "Post-install scripts completed"

# Crear directorios necesarios y permisos
RUN mkdir -p var/cache var/log config/jwt \
    && chown -R www-data:www-data var/ \
    && chmod -R 775 var/

# ! 31/05/2025 - Generar claves JWT automÃ¡ticamente si no existen
RUN if [ ! -f config/jwt/private.pem ]; then \
        echo "ðŸ”‘ Generando claves JWT para producciÃ³n..." && \
        openssl genpkey -out config/jwt/private.pem -algorithm rsa -pkcs8 -bits 4096 && \
        openssl pkey -in config/jwt/private.pem -out config/jwt/public.pem -pubout && \
        chmod 600 config/jwt/private.pem && \
        chmod 644 config/jwt/public.pem && \
        echo "âœ… Claves JWT generadas correctamente"; \
    fi

# Limpiar cache para producciÃ³n
RUN php bin/console cache:clear --env=prod \
    && php bin/console cache:warmup --env=prod

# Copiar script de inicio
COPY railway-start.sh /usr/local/bin/railway-start.sh
RUN chmod +x /usr/local/bin/railway-start.sh

# Exponer puerto que Railway asignarÃ¡
EXPOSE $PORT

# Comando de inicio para Railway
CMD ["/usr/local/bin/railway-start.sh"]
