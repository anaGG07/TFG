<?php

namespace App\EventListener;

use Psr\Log\LoggerInterface;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\Event\RequestEvent;
use Symfony\Component\HttpKernel\Event\ExceptionEvent;
use Symfony\Component\HttpKernel\KernelEvents;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;

/**
 * Listener para depurar problemas de routing en tracking
 * Solo activo en desarrollo - eliminar en producción
 */
class TrackingDebugListener implements EventSubscriberInterface
{
    public function __construct(
        private LoggerInterface $logger
    ) {
    }

    public static function getSubscribedEvents(): array
    {
        return [
            KernelEvents::REQUEST => ['onKernelRequest', 10],
            KernelEvents::EXCEPTION => ['onKernelException', 0],
        ];
    }

    public function onKernelRequest(RequestEvent $event): void
    {
        if (!$event->isMainRequest()) {
            return;
        }

        $request = $event->getRequest();
        $path = $request->getPathInfo();
        
        // Solo loggear rutas problemáticas
        if ($this->isTrackingRoute($path)) {
            $this->logger->info('Tracking Route Request', [
                'path' => $path,
                'method' => $request->getMethod(),
                'headers' => $request->headers->all(),
                'user_agent' => $request->headers->get('User-Agent'),
                'origin' => $request->headers->get('Origin'),
                'referer' => $request->headers->get('Referer')
            ]);
        }
    }

    public function onKernelException(ExceptionEvent $event): void
    {
        $exception = $event->getThrowable();
        $request = $event->getRequest();
        $path = $request->getPathInfo();

        // Solo manejar excepciones de rutas de tracking
        if (!$this->isTrackingRoute($path)) {
            return;
        }

        $response = null;

        if ($exception instanceof NotFoundHttpException) {
            $this->logger->error('Tracking Route Not Found', [
                'path' => $path,
                'method' => $request->getMethod(),
                'available_alternatives' => $this->getAlternativeRoutes($path)
            ]);

            $response = new JsonResponse([
                'error' => 'Route not found',
                'path' => $path,
                'method' => $request->getMethod(),
                'message' => 'This tracking endpoint is not available. Try alternative routes.',
                'alternatives' => $this->getAlternativeRoutes($path),
                'debug_endpoints' => [
                    '/api/debug/test-guests',
                    '/api/debug/test-invitations',
                    '/api/debug/test-notifications',
                    '/api/tracking/status'
                ]
            ], 404);

        } elseif ($exception instanceof MethodNotAllowedHttpException) {
            $this->logger->error('Tracking Method Not Allowed', [
                'path' => $path,
                'method' => $request->getMethod(),
                'allowed_methods' => $exception->getAllowedMethods()
            ]);

            $response = new JsonResponse([
                'error' => 'Method not allowed',
                'path' => $path,
                'method' => $request->getMethod(),
                'allowed_methods' => $exception->getAllowedMethods(),
                'message' => 'The HTTP method is not allowed for this tracking endpoint.'
            ], 405);
        }

        if ($response) {
            $event->setResponse($response);
        }
    }

    private function isTrackingRoute(string $path): bool
    {
        $trackingPaths = [
            '/api/guests',
            '/api/tracking',
            '/api/invitation-codes',
            '/api/user/notifications',
            '/api/debug'
        ];

        foreach ($trackingPaths as $trackingPath) {
            if (str_starts_with($path, $trackingPath)) {
                return true;
            }
        }

        return false;
    }

    private function getAlternativeRoutes(string $path): array
    {
        $alternatives = [];

        if (str_contains($path, 'guests/companions')) {
            $alternatives[] = '/api/tracking/companions';
        }
        
        if (str_contains($path, 'guests/following')) {
            $alternatives[] = '/api/tracking/following';
        }
        
        if (str_contains($path, 'invitation-codes')) {
            $alternatives[] = '/api/tracking/invitations';
        }
        
        if (str_contains($path, 'notifications/count')) {
            $alternatives[] = '/api/tracking/notifications-count';
        }

        return $alternatives;
    }
}
