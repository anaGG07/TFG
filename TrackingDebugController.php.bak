<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Routing\Annotation\Route;

/**
 * Controlador temporal para diagnóstico de errores de tracking
 * Solo para desarrollo - eliminar en producción
 */
#[Route('/debug')]
class TrackingDebugController extends AbstractController
{
    #[Route('/test-guests', name: 'debug_test_guests', methods: ['GET'])]
    public function testGuests(): JsonResponse
    {
        $user = $this->getUser();
        
        return $this->json([
            'message' => 'Test endpoint funcionando',
            'user_authenticated' => $user !== null,
            'user_id' => $user ? $user->getId() : null,
            'user_email' => $user ? $user->getEmail() : null,
            'timestamp' => date('c'),
            'routes_working' => [
                'guest_companions' => '/api/guests/companions',
                'guest_following' => '/api/guests/following',
                'invitation_codes' => '/api/invitation-codes',
                'notifications_count' => '/api/user/notifications/count'
            ]
        ]);
    }

    #[Route('/test-invitations', name: 'debug_test_invitations', methods: ['GET'])]
    public function testInvitations(): JsonResponse
    {
        $user = $this->getUser();
        
        return $this->json([
            'message' => 'Test invitation endpoint funcionando',
            'user_authenticated' => $user !== null,
            'user_id' => $user ? $user->getId() : null
        ]);
    }

    #[Route('/test-notifications', name: 'debug_test_notifications', methods: ['GET'])]
    public function testNotifications(): JsonResponse
    {
        $user = $this->getUser();
        
        return $this->json([
            'message' => 'Test notification endpoint funcionando',
            'user_authenticated' => $user !== null,
            'count' => 0 // Mock count
        ]);
    }

    #[Route('/error-info', name: 'debug_error_info', methods: ['GET'])]
    public function errorInfo(): JsonResponse
    {
        return $this->json([
            'common_errors' => [
                'Method Not Allowed (405)' => 'El endpoint existe pero el método HTTP no está permitido',
                'Not Found (404)' => 'La ruta no está registrada en el sistema de routing',
                'CORS preflight issues' => 'Problemas de CORS en peticiones OPTIONS'
            ],
            'solutions' => [
                'Clear cache' => 'php bin/console cache:clear',
                'Check routing' => 'php bin/console debug:router | grep guests',
                'Verify controllers' => 'Los controladores deben estar en App\\Controller\\',
                'Check attributes' => 'Verificar que #[Route] está bien configurado'
            ],
            'quick_tests' => [
                'test_guests' => '/api/debug/test-guests',
                'test_invitations' => '/api/debug/test-invitations', 
                'test_notifications' => '/api/debug/test-notifications'
            ]
        ]);
    }
}
